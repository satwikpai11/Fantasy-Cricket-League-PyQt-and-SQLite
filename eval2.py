# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'evaluate.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5.QtWidgets import QMessageBox

class Ui_EvaluateWindow(object):

    def calcscore(self):
        self.players_inteam_list.clear()

        # retrieving the current_username that is logged in
        try123 = sqlite3.connect('trytest2.db')
        sql0 = "select current_username from extras where username='pai123';"
        trycurs = try123.cursor()
        trycurs.execute(sql0)
        current_useris = ""
        while True:
            rec = trycurs.fetchone()
            if rec == None:
                break
            current_useris = rec[0]

        teampicked = self.team_name_pick.currentText()  # current team from combo box
        matchpicked = self.match_number_pick.currentText()  # current match from combo box
        # print(matchpicked)
        # getting all players from the team list column in the table
        sql1 = "select " + teampicked + " from teams_of_" + current_useris + ";"
        trycurs1 = try123.cursor()
        trycurs1.execute(sql1)
        list1 = []
        while True:
            rec = trycurs1.fetchone()
            if rec == None:
                break
            list1.append(rec[0])

        #removing teamname from the above list
        playerstooutput_list=[]
        for i in range(len(list1)):
            if (list1[i] != None and list1[i] != teampicked):
                playerstooutput_list.append(list1[i])

        #filling the list widget with only player names
        for i in range(len(playerstooutput_list)-1):
            self.players_inteam_list.insertItem(i, ""+ playerstooutput_list[i])


        total_points_for_team_split=[]
        total_points_for_team=0


        # 'dicti' -> gets the points that each player earned for the stats. set towards the end of the function to pointsperpersonsplit
        # 'players' -> is used to get all actual stats of each player. set right below
        global players
        players=[]
        players=playerstooutput_list
        global dicti
        dicti={}
        # going through list of players and calculate the points earned by each, current_user holds list of stats of that player
        for i in range(len(playerstooutput_list)-1):

            trying = sqlite3.connect('trytest2.db')
            sql555 = "select Scored, Faced, Fours, Sixes, Bowled, Maidens, Given, Wickets, Catches, Stumpings, RunOuts from matches where Player='"+playerstooutput_list[i]+"' and Match_Number='"+matchpicked+"';"
            # print(sql555)

            trycurs555 = trying.cursor()
            trycurs555.execute(sql555)
            current_user = []
            result = trycurs555.fetchall()
            for record in result:
                for j in range(len(record)):
                    current_user.append(record[j])
            #print(current_user)


            ptsFor_scored = int(current_user[0] * 0.5)
            ptsFor_fours = current_user[2] * 1
            ptsFor_sixes = current_user[3] * 2
            ptsFor_maidens = current_user[5] * 5
            ptsFor_wickets = current_user[7] * 10
            ptsFor_catchesandall = (current_user[8] + current_user[9] + current_user[10]) * 3
            ptsFor_halfcentury = 0
            ptsFor_century = 0
            ptsFor_strikerate = 0
            ptsFor_3wickethauls = 0
            ptsFor_5wickethauls = 0
            ptsFor_economyrate = 0

            if (current_user[0] > 49 and current_user[0] < 100):
                ptsFor_halfcentury = 5
            elif (current_user[0] > 100):
                ptsFor_century = 10

            if (current_user[1] != 0):
                strikerateis = current_user[0] / (current_user[1]) * 100
                if (strikerateis > 79 and strikerateis < 100):
                    ptsFor_strikerate = 2
                elif (strikerateis >= 100):
                    ptsFor_strikerate = 4

            if (current_user[7] > 2 and current_user[7] < 5):
                ptsFor_3wickethauls = 5
            elif (current_user[7] >= 5):
                ptsFor_5wickethauls = 10

            if (current_user[4] != 0):
                economyrateis = current_user[6] / current_user[4]
                if (economyrateis >= 3.5 and economyrateis < 4.5):
                    ptsFor_economyrate = 4
                elif (economyrateis > 1.9 and economyrateis < 3.5):
                    ptsFor_economyrate = 7
                elif (economyrateis <= 1.9):
                    ptsFor_economyrate = 10
                else:
                    ptsFor_economyrate = 0

            #putting players points split in a dictionary
            points_per_person_split = [ptsFor_scored, ptsFor_fours, ptsFor_sixes, ptsFor_halfcentury, ptsFor_century,
                                       ptsFor_strikerate, ptsFor_maidens, ptsFor_wickets, ptsFor_3wickethauls,
                                       ptsFor_5wickethauls, ptsFor_economyrate, ptsFor_catchesandall]
            dicti[playerstooutput_list[i]]=points_per_person_split

            # put individual points of players into a list
            points_per_person = ptsFor_scored + ptsFor_fours + ptsFor_sixes + ptsFor_maidens + ptsFor_wickets + ptsFor_catchesandall + ptsFor_halfcentury + ptsFor_century + ptsFor_strikerate + ptsFor_5wickethauls + ptsFor_3wickethauls + ptsFor_economyrate;
            total_points_for_team_split.append(points_per_person)


        # print("Total points for team split= ",total_points_for_team_split)
        # print("Totoal points for team= ", sum(total_points_for_team_split))
        # print(dicti)

        self.points_earned_list.clear()
        self.total_score.setText("Total Score - "+str(sum(total_points_for_team_split)))
        self.total_score.repaint()
        for i in range(len(total_points_for_team_split)):
            self.points_earned_list.insertItem(i, ""+str(total_points_for_team_split[i]))







    def setupUi(self, EvaluateWindow):
        EvaluateWindow.setObjectName("EvaluateWindow")
        EvaluateWindow.resize(417, 530)
        self.centralwidget = QtWidgets.QWidget(EvaluateWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setContentsMargins(-1, 10, -1, 10)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_4.addWidget(self.line)
        self.gridLayout.addLayout(self.verticalLayout_4, 3, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.players_inteam_list = QtWidgets.QListWidget(self.centralwidget)
        self.players_inteam_list.setObjectName("players_inteam_list")

        #calling function to popup stats of player
        self.players_inteam_list.itemDoubleClicked.connect(self.popupToShowPerformanceStats)

        self.horizontalLayout.addWidget(self.players_inteam_list)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.points_earned_list = QtWidgets.QListWidget(self.centralwidget)
        self.points_earned_list.setObjectName("points_earned_list")
        self.horizontalLayout.addWidget(self.points_earned_list)
        self.gridLayout.addLayout(self.horizontalLayout, 5, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(-1, 10, -1, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setContentsMargins(-1, 10, -1, -1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.scoreCalcBtn = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.scoreCalcBtn.setFont(font)
        self.scoreCalcBtn.setObjectName("scoreCalcBtn")

        #calling function when calculate button is hit
        self.scoreCalcBtn.clicked.connect(self.calcscore)

        self.horizontalLayout_3.addWidget(self.scoreCalcBtn)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.gridLayout.addLayout(self.horizontalLayout_3, 6, 0, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.team_name_pick = QtWidgets.QComboBox(self.centralwidget)
        self.team_name_pick.setObjectName("team_name_pick")

        # retrieving the current_username that is logged in
        try123 = sqlite3.connect('trytest2.db')
        sql0 = "select current_username from extras where username='pai123';"
        trycurs = try123.cursor()
        trycurs.execute(sql0)
        current_useris = ""
        while True:
            rec = trycurs.fetchone()
            if rec == None:
                break
            current_useris = rec[0]


                                                                                        # to get all teams made by a particular user
        try123 = sqlite3.connect('trytest2.db')
        sql2 = "select * from teams_of_"+current_useris+" where "+current_useris+"='"+current_useris+"';"
        try1cursor = try123.cursor()
        try1cursor.execute(sql2)
        team_list=[]
        while True:
            record = try1cursor.fetchone()
            if record == None:
                break
            l=len(record)
            for i in range(l):
                team_list.append(record[i])
                                                                                        #filling the team combo box
        for i in range(1,l):
            self.team_name_pick.insertItem(i,team_list[i])



        self.gridLayout_2.addWidget(self.team_name_pick, 0, 0, 1, 1)
        self.match_number_pick = QtWidgets.QComboBox(self.centralwidget)
        self.match_number_pick.setObjectName("match_number_pick")

        # filling the match combo box
        self.match_number_pick.insertItem(0, 'Match 1')
        self.match_number_pick.insertItem(1, 'Match 2')
        self.match_number_pick.insertItem(2, 'Match 3')
        self.match_number_pick.insertItem(3, 'Match 4')
        self.match_number_pick.insertItem(4, 'Match 5')
        self.match_number_pick.insertItem(5, 'Match 6')
        self.match_number_pick.insertItem(6, 'Match 7')
        self.match_number_pick.insertItem(7, 'Match 8')
        self.match_number_pick.insertItem(8, 'Match 9')


        self.gridLayout_2.addWidget(self.match_number_pick, 0, 2, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem5, 0, 1, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 2, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 35, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem6, 1, 0, 1, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setContentsMargins(-1, 10, -1, -1)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_6.addWidget(self.label_3)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem7)
        self.total_score = QtWidgets.QLabel(self.centralwidget)
        self.total_score.setObjectName("total_score")
        self.horizontalLayout_6.addWidget(self.total_score)
        self.gridLayout.addLayout(self.horizontalLayout_6, 4, 0, 1, 1)

        # adding layout, spacers and oush buttno to show the user guide
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem7)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.showUserGuide)
        self.horizontalLayout_7.addWidget(self.pushButton)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem8)
        self.gridLayout.addLayout(self.horizontalLayout_7, 1, 0, 1, 1)

        EvaluateWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(EvaluateWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 417, 22))
        self.menubar.setObjectName("menubar")
        EvaluateWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(EvaluateWindow)
        self.statusbar.setObjectName("statusbar")
        EvaluateWindow.setStatusBar(self.statusbar)

        self.retranslateUi(EvaluateWindow)
        QtCore.QMetaObject.connectSlotsByName(EvaluateWindow)

    def retranslateUi(self, EvaluateWindow):
        _translate = QtCore.QCoreApplication.translate
        EvaluateWindow.setWindowTitle(_translate("EvaluateWindow", "Evaluate"))
        self.label.setText(_translate("EvaluateWindow", "Evaluate the Performance of your Fantasy Team"))
        self.scoreCalcBtn.setText(_translate("EvaluateWindow", "Calculate Score"))
        self.pushButton.setText(_translate("EvaluateWindow", "User Guide"))
        self.label_3.setText(_translate("EvaluateWindow", "Players"))
        self.total_score.setText(_translate("EvaluateWindow", "Total Score -    "))

    def popupToShowPerformanceStats(self, item):
        player_name = item.text()
        matchnumber = self.match_number_pick.currentText()

        self.calcscore()
        #to access global variables from calscore()
        # 'dicti' -> gets the points that each player earned for the stats,
        # 'players' -> is used to get all actual stats of each player
        stats = dicti[player_name]

        # going through list of players and calculate the points earned by each, player_stat holds list of stats of that player
        for i in range(len(players) - 1):

            trying = sqlite3.connect('trytest2.db')
            sql555 = "select Scored, Faced, Fours, Sixes, Bowled, Maidens, Given, Wickets, Catches, Stumpings, RunOuts from matches where Player='" + \
                     player_name + "' and Match_Number = '"+matchnumber+"';"

            trycurs555 = trying.cursor()
            trycurs555.execute(sql555)
            player_stat = []
            result = trycurs555.fetchall()
            for record in result:
                for j in range(len(record)):
                    player_stat.append(record[j])   #will store the performance stats only for selected player


        msg = QMessageBox()
        msg.setWindowTitle(player_name+"'s Stats!")

        for i in range(len(stats)):
            ptsFor_scored = stats[0]
            ptsFor_fours = stats[1]
            ptsFor_sixes = stats[2]
            ptsFor_halfcentury = stats[3]
            ptsFor_century = stats[4]
            ptsFor_strikerate = stats[5]
            ptsFor_maidens = stats[6]
            ptsFor_wickets = stats[7]
            ptsFor_3wickethauls = stats[8]
            ptsFor_5wickethauls = stats[9]
            ptsFor_economyrate = stats[10]
            ptsFor_catchesandall = stats[11]

        hCent='no'
        Cent='no'
        if (player_stat[0]>49 and player_stat[0]<100):
            hCent='yes'
        if (player_stat[0]>99):
            Cent='yes'

        strikerateis=0
        if (player_stat[1] != 0):
            strikerateis = player_stat[0] / (player_stat[1]) * 100
            strikerateis="{:.2f}".format(strikerateis)

        threeWickets='no'
        fiveWickets='no'
        if (player_stat[7] > 2 and player_stat[7] < 5):
            threeWickets = 'yes'
        elif (player_stat[7] >= 5):
            fiveWickets='yes'

        economyrateis=0
        if (player_stat[4] != 0):
            economyrateis = player_stat[6] / player_stat[4]
            economyrateis="{:.2f}".format(economyrateis)

        msg.setIcon(QMessageBox.Information)
        msg.setText(player_name + "'s stats:\n" +
                    "Scored :   "+ str(player_stat[0]) +  "\t-> "+ str(ptsFor_scored) + " Points\n"
                    + "Number of Fours : "+ str(player_stat[2])+ "\t-> "+ str(ptsFor_fours) + " Points\n"
                    + "Number of Sixes : "+ str(player_stat[3])+ "\t-> "+ str(ptsFor_sixes) + " Points\n"
                    + "Half Century : "+ hCent + "\t-> "+ str(ptsFor_halfcentury) + " Points\n"
                    + "Century :  "+ Cent + "\t-> "+ str(ptsFor_century) + " Points\n"
                    + "Strike Rate : "+ str(strikerateis)+ "\t-> "+ str(ptsFor_strikerate) + " Points\n"
                    + "No.of Overs Bowled : "+ str(player_stat[4])+ "\t-> 0 Points\n"
                    + "Number of Maidens : "+ str(player_stat[5])+ "\t-> "+ str(ptsFor_maidens) + " Points\n"
                    + "Number of Wickets : "+ str(player_stat[7])+ "\t-> "+ str(ptsFor_wickets) + " Points\n"
                    + "3 Wicket Haul : "+ threeWickets + "\t-> "+ str(ptsFor_3wickethauls) + " Points\n"
                    + "5 Wicket Haul : "+ fiveWickets + "\t-> "+ str(ptsFor_5wickethauls) + " Points\n"
                    + "Economy Rate : "+ str(economyrateis) + "\t-> "+ str(ptsFor_economyrate) + " Points\n"
                    + "Catches/Runouts "+ str(player_stat[8]+player_stat[9]+player_stat[10])+ "\t-> "+ str(ptsFor_catchesandall) + " Points\n"
                    + "Therefore, Total points\nearned in this match\t-> "+ str(sum(stats)))

        x = msg.exec_()

    def showUserGuide(self):
        msg = QMessageBox()
        msg.setWindowTitle("User Guide!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Welcome to the User Guide!\nClick on the option that you need help with:")

        # match info
        matchInfoMSG = msg.addButton('Match Info', QtWidgets.QMessageBox.YesRole)
        matchInfoMSG.clicked.connect(self.showmatchinfoMsg)

        # player stats
        playerstatsMSG = msg.addButton("How to check a player's stats?", QtWidgets.QMessageBox.YesRole)
        playerstatsMSG.clicked.connect(self.showplayerstatsMsg)

        # how a player is scored
        howtoscoreMSG = msg.addButton('How a player is scored?', QtWidgets.QMessageBox.YesRole)
        howtoscoreMSG.clicked.connect(self.showhowtoscoresMsg)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showplayerstatsMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Player stats!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("How to check player's stats -\n"
                    "-> Double click on the player.\n"
                    "-> A popup appears displaying the stats of the player in the match along with the points distribution.")

        # back btn, to showUserGuide
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showUserGuide)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showmatchinfoMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Match Info!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("The players are evaluated on the basis of their performance in the 2011 ICC Men's Cricket World Cup.\n"
                    "Team India's fixtures were as follows -\n\n"
                    "-> Match 1: India v Bangladesh\n\tIndia won by 87 runs\n"
                    "-> Match 2: India v England\n\tMatch tied\n"
                    "-> Match 3: India v Ireland\n\tIndia won by 5 wickets\n"
                    "-> Match 4: India v Netherlands\n\tIndia won by 5 wickets\n"
                    "-> Match 5: India v South Africa\n\tSouth Africa won by 3 wickets\n"
                    "-> Match 6: India v West Indies\n\tIndia won by 80 runs\n"
                    "-> Match 7: India v Australia\n\tIndia won by 5 wickets\n"
                    "-> Match 8: India v Pakistan\n\tIndia won by 29 runs\n"
                    "-> Match 9: India v Sri Lanka\n\tIndia won by 6 wickets\n")

        # back btn, to showUserGuide
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showUserGuide)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showhowtoscoresMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Player stats!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("How a player's score is evaluated -\n"
                    "Select a category: ")

        # back btn, to showUserGuide
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showUserGuide)

        # bowling and fielding scoring info
        bowlingMSG = msg.addButton('Bowling and Fielding', QtWidgets.QMessageBox.YesRole)
        bowlingMSG.clicked.connect(self.showbowlingMsg)

        # batting scoring info
        battingMSG = msg.addButton('Batting', QtWidgets.QMessageBox.YesRole)
        battingMSG.clicked.connect(self.showbattingMsg)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showbattingMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Batting!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Batting:\n"
                    "-> 1 point for every 2 runs scored\n"
                    "-> Additional 5 points for a half-century\n"
                    "-> Additional 10 points for a century\n"
                    "-> Additional 2 points for strike rate between 80 and 100\n"
                    "-> Additional 4 points for strike rate greater than 100\n"
                    "-> 1 point for every boundary\n"
                    "-> 2 points for every six")

        # back btn, to showhowtoscoresMsg
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showhowtoscoresMsg)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showbowlingMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Bowling!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Bowling:\n"
                    "-> 10 points for each wicket taken\n"
                    "-> Additional 5 points for a 3 wicket-haul\n"
                    "-> Additional 10 points for a 5 wicket-haul\n"
                    "-> Additional 4 points for economy rate between 3.5 and 4.5\n"
                    "-> Additional 7 points for economy rate between 2 and 3.5\n"
                    "-> Additional 10 points for economy rate lesser than 2\n"
                    "-> 2 points for every six")

        # back btn, to showhowtoscoresMsg
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showhowtoscoresMsg)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_EvaluateWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())