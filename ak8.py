# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ik.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from teamName2 import *
from eval2 import *
from open2see3 import *
import sqlite3
import os
from PyQt5.QtWidgets import QMessageBox

class Ui_HomePage(object):

    # menu functions
    def openteamNameWindow(self, action):
        txt = (action.text())
        if (txt == 'Create Team'):
            players_picked = []
            for index in range(self.picked_list.count()):
                players_picked.append(self.picked_list.item(index).text())

            if (len(players_picked)>0):
                self.showpopup5()
            else :
                self.window = QtWidgets.QMainWindow()
                self.ui = Ui_teamNameWindow()
                self.ui.setupUi(self.window)
                self.window.show()

        elif (txt=='Open'):
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_OpenToViewTeamWindow()
            self.ui.setupUi(self.window)
            self.window.show()

        elif (txt=='Evaluate results'):
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_EvaluateWindow()
            self.ui.setupUi(self.window)
            self.window.show()
        elif (txt=='Save'):

            #getting list of players that havee been picked from the picked_list widget
            players_picked = []
            for index in range(self.picked_list.count()):
                players_picked.append(self.picked_list.item(index).text())


            # retrieving the current_username that is logged in
            try123 = sqlite3.connect('trytest2.db')
            sql0 = "select current_username from extras where username='pai123';"
            trycurs = try123.cursor()
            trycurs.execute(sql0)
            current_useris = ""
            while True:
                rec = trycurs.fetchone()
                if rec == None:
                    break
                current_useris = rec[0]

            # retrieving the current_team that the user is editing
            sql1 = "select current_team from extras where username='"+current_useris+"';"
            try1curs = try123.cursor()
            try1curs.execute(sql1)
            current_teamis = ""
            while True:
                rec = try1curs.fetchone()
                if rec == None:
                    break
                current_teamis = rec[0]

            #ensuring the value is less than or equal to 1000
            if (int(self.label_3.text()) < 0):
                self.showpopup4()
            else :
                if (len(players_picked) == 11):  # checking if all players have been picked.
                    for i in range(len(players_picked)):
                        # inserting new players into the current_team of the current_user
                        try1234 = sqlite3.connect('trytest2.db')
                        sql1 = "insert into teams_of_" + current_useris + " (" + current_teamis + ") values ('" + \
                               players_picked[i] + "');"
                        try1cursor = try1234.cursor()
                        try:
                            try1cursor.execute(sql1)
                            try1234.commit()
                            print("team updated111 successfully")
                        except:
                            print("error in updating111 team operation")

                        # try9 = sqlite3.connect('trytest2.db')
                        # sql9 = "UPDATE teams_of_" + current_useris + " SET " + current_teamis + "='Saved' WHERE " + current_useris + "='" + current_useris + "';"
                        # try9cursor = try9.cursor()
                        # try:
                        #     try9cursor.execute(sql9)
                        #     try9.commit()
                        #     print("record updated successfully")
                        # except:
                        #     print("error in update operation")

                    # inserting the points used in the last row
                    try1234 = sqlite3.connect('trytest2.db')
                    sql1 = "insert into teams_of_" + current_useris + " (" + current_teamis + ") values ('" + self.label_5.text() + "');"
                    try1cursor = try1234.cursor()
                    try:
                        try1cursor.execute(sql1)
                        try1234.commit()
                        print("points used inserted successfully")
                    except:
                        print("error in points used inserting operation")

                    # updating current team in extras to no_team
                    try9 = sqlite3.connect('trytest2.db')
                    sql9 = "UPDATE extras SET current_team='no_team_selected' WHERE username='" + current_useris + "';"
                    try9cursor = try9.cursor()
                    try:
                        try9cursor.execute(sql9)
                        try9.commit()
                        print("current team name updates successfully")
                    except:
                        print("error in current team name update operation")

                    self.team_name.setText("Team Name -")
                    self.label_3.setText("1000")
                    self.label_3.repaint()
                    self.label_5.setText("0")
                    self.label_5.repaint()
                    self.batCnt.setText("0")
                    self.batCnt.repaint()
                    self.bwlCnt.setText("0")
                    self.bwlCnt.repaint()
                    self.arCnt.setText("0")
                    self.arCnt.repaint()
                    self.label_2.setText("0")
                    self.label_2.repaint()
                    self.radioButton.setChecked(False)
                    self.rdBAT.setChecked(False)
                    self.rdBWL.setChecked(False)
                    self.rdAR.setChecked(False)
                    self.rdWK.setChecked(False)
                    self.player_list.clear()
                    self.picked_list.clear()
                    self.showpopup2()

                else:
                    self.showpopup1()

    # refresh button
    def doSomething(self):

        #retrieving the current_username that is logged in
        try123 = sqlite3.connect('trytest2.db')
        sql0 = "select current_username from extras where username='pai123';"
        trycurs=try123.cursor()
        trycurs.execute(sql0)
        current_useris=""
        while True:
            rec=trycurs.fetchone()
            if rec == None:
                break
            current_useris=rec[0]

        # updating team_name
        try12 = sqlite3.connect('trytest2.db')
        sql1 = "SELECT * from extras where username='"+current_useris+"';"
        try1cursor = try12.cursor()
        try1cursor.execute(sql1)
        while True:
            record = try1cursor.fetchone()
            if record == None:
                break
            self.team_name.setText("Team Name - " + record[2])
            self.team_name.repaint()

        self.label_3.setText("1000")
        self.label_3.repaint()
        self.label_5.setText("0")
        self.label_5.repaint()
        self.batCnt.setText("0")
        self.batCnt.repaint()
        self.bwlCnt.setText("0")
        self.bwlCnt.repaint()
        self.arCnt.setText("0")
        self.arCnt.repaint()
        self.label_2.setText("0")
        self.label_2.repaint()
        self.radioButton.setChecked(False)
        self.rdBAT.setChecked(False)
        self.rdBWL.setChecked(False)
        self.rdAR.setChecked(False)
        self.rdWK.setChecked(False)
        self.player_list.clear()
        self.picked_list.clear()

        if (self.team_name.text() != 'Team Name -' and self.team_name.text() != 'Team Name - no_team_selected'):
            self.player_list.setEnabled(True)
            self.picked_list.setEnabled(True)
        else:
            self.player_list.setEnabled(False)
            self.picked_list.setEnabled(False)

        # # updating points_available
        # sql2 = "SELECT * from extras;"
        # try2cursor = try12.cursor()
        # try2cursor.execute(sql2)
        # while True:
        #     record = try2cursor.fetchone()
        #     if record == None:
        #         break
        #     self.label_3.setText("" + str(record[3]))
        #     self.label_3.repaint()
        #     global points_aval
        #     points_aval = record[3]
        #
        # # updating points_used
        # sql3 = "SELECT * from extras;"
        # try3cursor = try12.cursor()
        # try3cursor.execute(sql3)
        # while True:
        #     record = try3cursor.fetchone()
        #     if record == None:
        #         break
        #     self.label_5.setText("" + str(record[4]))
        #     self.label_5.repaint()
        #     global points_use
        #     points_use = record[4]

    # label_2 is wkCnt
    # label_3 : points_available
    # label_5 : points_used
    def setupUi(self, HomePage):
        HomePage.setObjectName("HomePage")
        HomePage.resize(600, 450)
        self.centralwidget = QtWidgets.QWidget(HomePage)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 4, 1, 1)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setContentsMargins(-1, 20, -1, -1)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_10.addWidget(self.label_6)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_10.addWidget(self.label_5)
        self.verticalLayout_6.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_2.setContentsMargins(-1, 7, -1, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.team_name = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.team_name.setFont(font)
        self.team_name.setObjectName("team_name")
        self.horizontalLayout_2.addWidget(self.team_name)
        self.verticalLayout_6.addLayout(self.horizontalLayout_2)
        self.picked_list = QtWidgets.QListWidget(self.centralwidget)
        self.picked_list.setObjectName("picked_list")

        # removing from picked list and placing in player list
        self.picked_list.itemDoubleClicked.connect(self.removefrompickedlist)

        self.verticalLayout_6.addWidget(self.picked_list)
        self.gridLayout.addLayout(self.verticalLayout_6, 2, 3, 1, 1)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.bat1 = QtWidgets.QLabel(self.centralwidget)
        self.bat1.setStyleSheet("border-color: rgb(114, 115, 115);")
        self.bat1.setObjectName("bat1")
        self.horizontalLayout_7.addWidget(self.bat1)
        self.batCnt = QtWidgets.QLabel(self.centralwidget)
        self.batCnt.setObjectName("batCnt")
        self.horizontalLayout_7.addWidget(self.batCnt)
        self.bwl1 = QtWidgets.QLabel(self.centralwidget)
        self.bwl1.setStyleSheet("border-color: rgb(102, 103, 103);")
        self.bwl1.setObjectName("bwl1")
        self.horizontalLayout_7.addWidget(self.bwl1)
        self.bwlCnt = QtWidgets.QLabel(self.centralwidget)
        self.bwlCnt.setObjectName("bwlCnt")
        self.horizontalLayout_7.addWidget(self.bwlCnt)
        self.ar1 = QtWidgets.QLabel(self.centralwidget)
        self.ar1.setStyleSheet("border-color: rgb(103, 104, 104);")
        self.ar1.setObjectName("ar1")
        self.horizontalLayout_7.addWidget(self.ar1)
        self.arCnt = QtWidgets.QLabel(self.centralwidget)
        self.arCnt.setObjectName("arCnt")
        self.horizontalLayout_7.addWidget(self.arCnt)
        self.wk1 = QtWidgets.QLabel(self.centralwidget)
        self.wk1.setStyleSheet("border-color: rgb(104, 106, 106);")
        self.wk1.setObjectName("wk1")
        self.horizontalLayout_7.addWidget(self.wk1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_7.addWidget(self.label_2)
        self.gridLayout.addLayout(self.horizontalLayout_7, 1, 1, 1, 3)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 2, 2, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 2, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setContentsMargins(-1, 20, -1, -1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.gridLayout.addLayout(self.horizontalLayout_3, 0, 1, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        # adding Points Value button
        self.valuePointsBtn = QtWidgets.QPushButton(self.centralwidget)
        self.valuePointsBtn.setObjectName("valuePointsBtn")
        # function to show value points
        self.valuePointsBtn.clicked.connect(self.showvaluepointsMsg)
        self.horizontalLayout_4.addWidget(self.valuePointsBtn)

        #adding user guide button
        self.userGuideBtn = QtWidgets.QPushButton(self.centralwidget)
        self.userGuideBtn.setObjectName("userGuideBtn")
        #function to show user guide
        self.userGuideBtn.clicked.connect(self.showUserGuide)
        self.horizontalLayout_4.addWidget(self.userGuideBtn)

        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.refreshBtn = QtWidgets.QPushButton(self.centralwidget)
        self.refreshBtn.setObjectName("refreshBtn")

        # btn to refreshh
        self.refreshBtn.clicked.connect(self.doSomething)

        self.horizontalLayout_4.addWidget(self.refreshBtn)
        self.gridLayout.addLayout(self.horizontalLayout_4, 0, 3, 1, 1)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(-1, 20, -1, -1)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_9.addWidget(self.label_4)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_9.addWidget(self.label_3)
        self.verticalLayout_5.addLayout(self.horizontalLayout_9)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setObjectName("radioButton")
        # to check which is clicked
        self.radioButton.toggled.connect(self.checkstate)
        self.horizontalLayout.addWidget(self.radioButton)
        self.rdBAT = QtWidgets.QRadioButton(self.centralwidget)
        self.rdBAT.setObjectName("rdBAT")
        # to check which is clicked
        self.rdBAT.toggled.connect(self.checkstate)
        self.horizontalLayout.addWidget(self.rdBAT)
        self.rdBWL = QtWidgets.QRadioButton(self.centralwidget)
        self.rdBWL.setObjectName("rdBWL")
        # to check which is clicked
        self.rdBWL.toggled.connect(self.checkstate)
        self.horizontalLayout.addWidget(self.rdBWL)
        self.rdAR = QtWidgets.QRadioButton(self.centralwidget)
        self.rdAR.setObjectName("rdAR")
        # to check which is clicked
        self.rdAR.toggled.connect(self.checkstate)
        self.horizontalLayout.addWidget(self.rdAR)
        self.rdWK = QtWidgets.QRadioButton(self.centralwidget)
        self.rdWK.setObjectName("rdWK")
        # to check which is clicked
        self.rdWK.toggled.connect(self.checkstate)
        self.horizontalLayout.addWidget(self.rdWK)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.player_list = QtWidgets.QListWidget(self.centralwidget)
        self.player_list.setObjectName("player_list")

        # calling function to remove from player list and add in picked list
        self.player_list.itemDoubleClicked.connect(self.removefromplayerlist)

        self.verticalLayout_5.addWidget(self.player_list)
        self.gridLayout.addLayout(self.verticalLayout_5, 2, 1, 1, 1)
        HomePage.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(HomePage)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 463, 22))
        self.menubar.setObjectName("menubar")
        self.menuManage = QtWidgets.QMenu(self.menubar)
        self.menuManage.setObjectName("menuManage")
        HomePage.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(HomePage)
        self.statusbar.setObjectName("statusbar")
        HomePage.setStatusBar(self.statusbar)
        self.actionCreate_Team = QtWidgets.QAction(HomePage)
        self.actionCreate_Team.setObjectName("actionCreate_Team")
        self.actionOpen = QtWidgets.QAction(HomePage)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(HomePage)
        self.actionSave.setObjectName("actionSave")
        self.actionEvaluate_results = QtWidgets.QAction(HomePage)
        self.actionEvaluate_results.setObjectName("actionEvaluate_results")
        self.actionQuit = QtWidgets.QAction(HomePage)
        self.actionQuit.setObjectName("actionQuit")
        self.menuManage.addAction(self.actionCreate_Team)
        self.menuManage.addAction(self.actionOpen)
        self.menuManage.addAction(self.actionSave)
        self.menuManage.addSeparator()
        self.menuManage.addAction(self.actionEvaluate_results)
        self.menuManage.addSeparator()
        self.menuManage.addAction(self.actionQuit)
        self.menuManage.addSeparator()
        self.menubar.addAction(self.menuManage.menuAction())

        # calling menu functions
        self.menuManage.triggered[QtWidgets.QAction].connect(self.openteamNameWindow)

        self.retranslateUi(HomePage)
        QtCore.QMetaObject.connectSlotsByName(HomePage)

    def retranslateUi(self, HomePage):
        _translate = QtCore.QCoreApplication.translate
        HomePage.setWindowTitle(_translate("HomePage", "MainWindow"))
        self.label_6.setText(_translate("HomePage", "Points Used -"))
        self.label_5.setText(_translate("HomePage", "0"))

        # update team name
        try12 = sqlite3.connect('trytest2.db')
        sql1 = "SELECT * from extras;"
        try1cursor = try12.cursor()
        try1cursor.execute(sql1)
        while True:
            record = try1cursor.fetchone()
            if record == None:
                break
            self.team_name.setText(_translate("MainPage", "Team Name -"))

        if (self.team_name.text() == 'Team Name -'):
            self.player_list.setEnabled(False)
            self.picked_list.setEnabled(False)


        self.bat1.setText(_translate("HomePage", "Batsmen :"))
        self.batCnt.setText(_translate("HomePage", "0"))
        self.bwl1.setText(_translate("HomePage", "Bowlers :"))
        self.bwlCnt.setText(_translate("HomePage", "0"))
        self.ar1.setText(_translate("HomePage", "All-Rounders :"))
        self.arCnt.setText(_translate("HomePage", "0"))
        self.wk1.setText(_translate("HomePage", "Wicket-Keepers :"))
        self.label_2.setText(_translate("HomePage", "0"))
        self.label.setText(_translate("HomePage", "Your selection"))

        self.valuePointsBtn.setText(_translate("HomePage", "Value Points"))
        self.userGuideBtn.setText(_translate("HomePage", "User Guide"))

        self.refreshBtn.setText(_translate("HomePage", "Refresh"))
        self.label_4.setText(_translate("HomePage", "Points Available -"))
        self.label_3.setText(_translate("HomePage", "1000"))
        self.radioButton.setText(_translate("HomePage", "ALL"))
        self.rdBAT.setText(_translate("HomePage", "BAT"))
        self.rdBWL.setText(_translate("HomePage", "BWL"))
        self.rdAR.setText(_translate("HomePage", "AR"))
        self.rdWK.setText(_translate("HomePage", "WK"))
        self.menuManage.setTitle(_translate("HomePage", "Manage"))
        self.actionCreate_Team.setText(_translate("HomePage", "Create Team"))
        self.actionOpen.setText(_translate("HomePage", "Open"))
        self.actionSave.setText(_translate("HomePage", "Save"))
        self.actionEvaluate_results.setText(_translate("HomePage", "Evaluate results"))
        self.actionQuit.setText(_translate("HomePage", "Quit"))

    #label_2 is wkCnt
    #updates the bat,bwl,ar,wk count when players are ADDED
    def count_players_up(self, cat):
        batCount = int(self.batCnt.text())
        bwlCount = int(self.bwlCnt.text())
        arCount = int(self.arCnt.text())
        wkCount = int(self.label_2.text())
        if (cat=='BAT'):
            batCount+=1
            self.batCnt.setText(str(batCount))
        elif (cat=='BWL'):
            bwlCount+=1
            self.bwlCnt.setText(str(bwlCount))
        elif (cat=='AR'):
            arCount+=1
            self.arCnt.setText(str(arCount))
        else:
            wkCount+=1
            self.label_2.setText(str(wkCount))

    # label_2 is wkCnt
    # updates the bat,bwl,ar,wk count when players are DELETED
    def count_players_down(self, cat):
        batCount = int(self.batCnt.text())
        bwlCount = int(self.bwlCnt.text())
        arCount = int(self.arCnt.text())
        wkCount = int(self.label_2.text())
        if (cat=='BAT'):
            batCount-=1
            self.batCnt.setText(str(batCount))
        elif (cat=='BWL'):
            bwlCount-=1
            self.bwlCnt.setText(str(bwlCount))
        elif (cat=='AR'):
            arCount-=1
            self.arCnt.setText(str(arCount))
        else:
            wkCount-=1
            self.label_2.setText(str(wkCount))

    # label_2 is wkCnt
    #remove from player lsit to add to picked list
    def removefromplayerlist(self, item):
        batCount = int(self.batCnt.text())
        bwlCount = int(self.bwlCnt.text())
        arCount = int(self.arCnt.text())
        wkCount = int(self.label_2.text())
        points_aval = int(self.label_3.text())
        points_used = int(self.label_5.text())



        try12 = sqlite3.connect('trytest2.db')
        sql1 = "SELECT Category from stats where Player = '" + item.text() + "';"
        try1cursor = try12.cursor()
        try1cursor.execute(sql1)
        while True:
            record = try1cursor.fetchone()
            if record == None:
                break
            if (record[0]=='BAT' and batCount<4):   # to limit batsmen to 4
                try123 = sqlite3.connect('trytest2.db')
                sql2 = "SELECT PValue from stats where Player = '" + item.text() + "';"     #to check value
                try2cursor = try123.cursor()
                try2cursor.execute(sql2)
                while True:
                    record1 = try2cursor.fetchone()
                    if record1 == None:
                        break
                    points_aval-=record1[0]
                    self.label_3.setText(str(points_aval))                                  #to update points
                    points_used+=record1[0]
                    self.label_5.setText(str(points_used))


                self.count_players_up(record[0])
                self.player_list.takeItem(self.player_list.row(item))
                self.picked_list.addItem(item.text())
                self.update_pickedlist()
            elif (record[0]=='BAT' and batCount==4) :
                self.showpopup(record[0])

            elif (record[0]=='BWL' and bwlCount<4):   # to limit bowlers to 4
                try123 = sqlite3.connect('trytest2.db')
                sql2 = "SELECT PValue from stats where Player = '" + item.text() + "';"     #to check value
                try2cursor = try123.cursor()
                try2cursor.execute(sql2)
                while True:
                    record1 = try2cursor.fetchone()
                    if record1 == None:
                        break
                    points_aval -= record1[0]
                    self.label_3.setText(str(points_aval))                                  #to update points
                    points_used += record1[0]
                    self.label_5.setText(str(points_used))

                self.count_players_up(record[0])
                self.player_list.takeItem(self.player_list.row(item))
                self.picked_list.addItem(item.text())
                self.update_pickedlist()
            elif (record[0]=='BWL' and bwlCount==4) :
                self.showpopup(record[0])

            elif (record[0]=='AR' and arCount<2):     # to limit allrounders to 2
                try123 = sqlite3.connect('trytest2.db')
                sql2 = "SELECT PValue from stats where Player = '" + item.text() + "';"     #to check value
                try2cursor = try123.cursor()
                try2cursor.execute(sql2)
                while True:
                    record1 = try2cursor.fetchone()
                    if record1 == None:
                        break
                    points_aval -= record1[0]
                    self.label_3.setText(str(points_aval))                                  #to update points
                    points_used += record1[0]
                    self.label_5.setText(str(points_used))

                self.count_players_up(record[0])
                self.player_list.takeItem(self.player_list.row(item))
                self.picked_list.addItem(item.text())
                self.update_pickedlist()
            elif (record[0]=='AR' and arCount==2) :
                self.showpopup(record[0])

            elif (record[0]=='WK' and wkCount<1):     # to limit keepers to 1
                try123 = sqlite3.connect('trytest2.db')
                sql2 = "SELECT PValue from stats where Player = '" + item.text() + "';"     #to check value
                try2cursor = try123.cursor()
                try2cursor.execute(sql2)
                while True:
                    record1 = try2cursor.fetchone()
                    if record1 == None:
                        break
                    points_aval -= record1[0]
                    self.label_3.setText(str(points_aval))                                  #to update points
                    points_used += record1[0]
                    self.label_5.setText(str(points_used))

                self.count_players_up(record[0])
                self.player_list.takeItem(self.player_list.row(item))
                self.picked_list.addItem(item.text())
                self.update_pickedlist()
            elif (record[0]=='WK' and wkCount==1) :
                self.showpopup(record[0])

    #remove from picked list to add to player list
    def removefrompickedlist(self, item):
        points_aval = int(self.label_3.text())
        points_used = int(self.label_5.text())
        self.picked_list.takeItem(self.picked_list.row(item))
        self.player_list.addItem(item.text())
        self.update_pickedlist()

        try12 = sqlite3.connect('trytest2.db')
        sql1 = "SELECT Category from stats where Player = '" + item.text() + "';"
        try1cursor = try12.cursor()
        try1cursor.execute(sql1)
        while True:
            record = try1cursor.fetchone()
            if record == None:
                break
            self.count_players_down(record[0])

        try123 = sqlite3.connect('trytest2.db')
        sql2 = "SELECT PValue from stats where Player = '" + item.text() + "';"         # to check value
        try2cursor = try123.cursor()
        try2cursor.execute(sql2)
        while True:
            record1 = try2cursor.fetchone()
            if record1 == None:
                break
            points_aval += record1[0]
            self.label_3.setText(str(points_aval))                                      # to update points
            points_used -= record1[0]
            self.label_5.setText(str(points_used))


    #updating the picked list
    def update_pickedlist(self):
        global list_picked
        list_picked=[]
        list_picked = [str(self.picked_list.item(i).text()) for i in range(self.picked_list.count())]
        #print(list_picked)

    #to check radio buttons and populate the player list
    def checkstate(self):
        if (self.team_name.text() != 'Team Name -' and self.team_name.text() != 'Team Name - no_team_selected'):
            self.player_list.setEnabled(True)
            self.picked_list.setEnabled(True)
        else:
            self.player_list.setEnabled(False)
            self.picked_list.setEnabled(False)

        if (self.player_list.isEnabled() == False):
            self.showpopup3()

        try123 = sqlite3.connect('trytest2.db')
        sql2 = "SELECT Player from matches ;"
        try1cursor = try123.cursor()
        try1cursor.execute(sql2)
        player_lists = []
        result = try1cursor.fetchall()
        for record in result:
            player_lists.append(record[0])
        #calling update picked list function to get list of players picked
        self.update_pickedlist()
        list_picked1=list_picked

        if self.radioButton.isChecked() == True:        #all button

            self.player_list.clear()
            # used to get all players to populate the player list widget
            try123 = sqlite3.connect('trytest2.db')
            sql2 = "SELECT Player from stats ;"
            try1cursor = try123.cursor()
            try1cursor.execute(sql2)
            player_list1 = []
            result = try1cursor.fetchall()
            for record in result:
                player_list1.append(record[0])
            # poppulating into player list
            for i in range(0, len(player_list1)):
                if (player_list1[i] not in list_picked1):   #those not in picked only
                    self.player_list.insertItem(i, "" + player_list1[i])



        elif self.rdBAT.isChecked() == True:
            self.player_list.clear()
            # used to get all players to populate the player list widget
            try123 = sqlite3.connect('trytest2.db')
            sql2 = "SELECT Player from stats where Category=='BAT';"
            try1cursor = try123.cursor()
            try1cursor.execute(sql2)
            player_list1 = []
            result = try1cursor.fetchall()
            for record in result:
                player_list1.append(record[0])
            # poppulating into player list
            for i in range(0, len(player_list1)):
                if (player_list1[i] not in list_picked1):       #those not in picked only
                    self.player_list.insertItem(i, "" + player_list1[i])


        elif self.rdBWL.isChecked() == True:
            self.player_list.clear()
            # used to get all players to populate the player list widget
            try123 = sqlite3.connect('trytest2.db')
            sql2 = "SELECT Player from stats where Category=='BWL';"
            try1cursor = try123.cursor()
            try1cursor.execute(sql2)
            player_list1 = []
            result = try1cursor.fetchall()
            for record in result:
                player_list1.append(record[0])
            # poppulating into player list
            for i in range(0, len(player_list1)):
                if (player_list1[i] not in list_picked1):       #those not in picked only
                    self.player_list.insertItem(i, "" + player_list1[i])


        elif self.rdAR.isChecked() == True:
            self.player_list.clear()
            # used to get all players to populate the player list widget
            try123 = sqlite3.connect('trytest2.db')
            sql2 = "SELECT Player from stats where Category=='AR';"
            try1cursor = try123.cursor()
            try1cursor.execute(sql2)
            player_list1 = []
            result = try1cursor.fetchall()
            for record in result:
                player_list1.append(record[0])
            # poppulating into player list
            for i in range(0, len(player_list1)):
                if (player_list1[i] not in list_picked1):       #those not in picked only
                    self.player_list.insertItem(i, "" + player_list1[i])


        elif self.rdWK.isChecked() == True:
            self.player_list.clear()
            # used to get all players to populate the player list widget
            try123 = sqlite3.connect('trytest2.db')
            sql2 = "SELECT Player from stats where Category=='WK';"
            try1cursor = try123.cursor()
            try1cursor.execute(sql2)
            player_list1 = []
            result = try1cursor.fetchall()
            for record in result:
                player_list1.append(record[0])
            # poppulating into player list
            for i in range(0, len(player_list1)):
                if (player_list1[i] not in list_picked1):       #those not in picked only
                    self.player_list.insertItem(i, "" + player_list1[i])


        else :
            print("how..")


    def showpopup(self, cat):
        msg=QMessageBox()
        msg.setWindowTitle("Error!")
        msg.setIcon(QMessageBox.Warning)

        if (cat=='BAT'):
            msg.setText("A maximum of 4 batsmen can be selected. Give the all rounders a chance!")
        elif (cat=='BWL'):
            msg.setText("A maximum of 4 bowlers can be selected. Give the all rounders a chance!")
        elif (cat=='AR'):
            msg.setText("A maximum of 2 all rounders can be selected!")
        elif (cat=='WK'):
            msg.setText("Only 1 keeper can be selected!")
        x=msg.exec_()

    def showpopup1(self):
        msg = QMessageBox()
        msg.setWindowTitle("Error!")

        msg.setIcon(QMessageBox.Warning)
        msg.setText("Make sure to pick all 11 players before saving your team!")
        x = msg.exec_()

    def showpopup2(self):
        msg = QMessageBox()
        msg.setWindowTitle("Team Saved!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Your Team has been saved! You can view it by following the path : Manage->Open")
        x = msg.exec_()

    def showpopup3(self):
        msg = QMessageBox()
        msg.setWindowTitle("Team Saved!")
        msg.setIcon(QMessageBox.Warning)
        if (self.team_name.text() == 'Team Name - no_team_selected'):
            msg.setText("Please create a new team!")
        else:
            msg.setText("Please hit the refresh button to see your team name appear. You may proceed after doing so!")
        x = msg.exec_()

    def showpopup4(self):
        msg = QMessageBox()
        msg.setWindowTitle("Team Saved!")

        msg.setIcon(QMessageBox.Critical)
        msg.setText("This team cannot be created as the team is too expensive to make!")
        x = msg.exec_()

    def showpopup5(self):
        msg = QMessageBox()
        msg.setWindowTitle("Team Saved!")

        msg.setIcon(QMessageBox.Warning)
        msg.setText("Please make sure to complete the current team before creating a new one!")
        x = msg.exec_()

    def showUserGuide(self):
        msg = QMessageBox()
        msg.setWindowTitle("User Guide!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Welcome to the User Guide!\nClick on the option that you need help with:")

        #evaluate scores button
        evaluatescoresMSG = msg.addButton('Evaluating Team Score', QtWidgets.QMessageBox.YesRole)
        evaluatescoresMSG.clicked.connect(self.showevaluateMsg)
        # pick players button
        pickplayersMSG = msg.addButton('Picking Players', QtWidgets.QMessageBox.YesRole)
        pickplayersMSG.clicked.connect(self.showpickplayersMsg)
        # create team button
        createteamMSG = msg.addButton('Creating New Team', QtWidgets.QMessageBox.YesRole)
        createteamMSG.clicked.connect(self.showcreateTeamMsg)
        # basic rules button
        basicrulesMSG = msg.addButton('Basic Rules', QtWidgets.QMessageBox.YesRole)
        basicrulesMSG.clicked.connect(self.showbasicRulesMsg)
        #ok button
        msg.addButton(msg.Close)



        x = msg.exec_()

    def showbasicRulesMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Basic Rules!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Fantasy Premier League is a team building game.\n"
                    "-> Here, the user must pick a team of 11 Indian cricketers - "
                    "4 Batsmen, 4 Bowlers, 2 All Rounders and 1 Wicket-Keeper. The cricketers are assigned Value points based on their careers.\n"
                    "-> Each user is given 1000 Value points that he/she can spend to build the best team he/she desires.\n"
                    "-> The cricketers are given points based on their performance in the 2011 ICC Men's Circket World Cup.\n"
                    "-> India was represented by a 15 man team and played a total of 9 matches.\n"
                    "-> The total points of the team built by the user is evaluated by a variety of criteria as explained later.\n\n"
                    "Hope you enjoy the game! Get creative and compete with the best!")

        # back btn, to showUserGuide
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showUserGuide)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showcreateTeamMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Create Team!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Creating a Team -\n"
                    "-> Click on 'Manage' on the menu bar and then, click on 'Create Team'.\n"
                    "-> Enter your team name and confirm the same.\n"
                    "-> Now, hit the Refresh button to see your newly created team's name appear.\n"
                    "-> You may start adding players to your team now!")

        # back btn, to showUserGuide
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showUserGuide)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showpickplayersMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Picking Players!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Picking Players -\n"
                    "-> A team of 11 players must be selected.\n"
                    "-> No more and no less than 4 batsmen, 4 bowlers, 2 all-rounders and 1 keeper.\n"
                    "-> The total Value Points available and used is displayed.\n"
                    "-> As you pick a player, the Player's Value Points will be deducted from the Value Points available.\n"
                    "-> The players can be filtered according to a category with the help of the radio buttons.\n"
                    "-> The first list displays all players available.\n"
                    "-> The second list displays all players that have been added to your team.\n"
                    "-> Players can be added to your team by double clicking on the player's name from the first list.\n"
                    "-> Players can be removed from your team by double clicking on the player's name from the second list.\n\n"
                    "Take a look at the players and their values by clicking on the button below.")

        valuepointsMSG = msg.addButton('Player Values', QtWidgets.QMessageBox.YesRole)
        valuepointsMSG.clicked.connect(self.showvaluepointsMsg)

        # back btn, to showUserGuide
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showUserGuide)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showvaluepointsMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Create Team!")

        msg.setIcon(QMessageBox.Information)

        try123 = sqlite3.connect('trytest2.db')
        sql1 = "SELECT Player, PValue from stats;"
        try1cursor = try123.cursor()
        try1cursor.execute(sql1)
        player_list1 = []
        points_list1 = []
        result = try1cursor.fetchall()
        for record in result:
            player_list1.append(record[0])
            points_list1.append(record[1])
        # print(player_list1)
        # print(points_list1)

        txt='Player\t->\tValue\n-------------------------------\n'
        for i in range(len(player_list1)):
            txt=txt+(str(player_list1[i]) + "\t->\t  " + str(points_list1[i]) + "\n")
        msg.setText(txt)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()

    def showevaluateMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Evaluate Scores!")

        msg.setIcon(QMessageBox.Information)
        msg.setText("Evaluating a Team's score -\n"
                    "-> Click on 'Manage' on the menu bar and then, click on 'Evaluate Results'.\n"
                    "-> Select a team from the dropdown and hit 'Calculate Score'.\n"
                    "-> The name of your players will be shown along with the points earned.")

        # back btn, to showUserGuide
        back = msg.addButton('Back', QtWidgets.QMessageBox.YesRole)
        back.clicked.connect(self.showUserGuide)

        # ok button
        msg.addButton(msg.Close)

        x = msg.exec_()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_HomePage()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())